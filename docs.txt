Проект "Klopit"

Версия: 1.0
Дата: 24 Апреля 2025 г.

1. Введение и Цели Проекта

Проект "Klopit" представляет собой веб-сервис для управления проектами и задачами, разработанный с целью предоставить пользователям простой, интуитивно понятный и функциональный инструмент для организации своей работы и работы в небольших командах. Изначальная задача заключалась в создании аналога существующих систем управления задачами (таких как Trello, Jira, Asana), но с фокусом на основной функционал и возможностью легкого развертывания.

Разработка велась итеративно, начиная с базовой аутентификации и постепенно наращивая функционал управления проектами, задачами, файлами, коммуникацией и отчетами. Основной упор делался на создание рабочей системы с использованием стека Flask + SQLAlchemy + Bootstrap + JS, который является популярным выбором для быстрой разработки веб-приложений на Python.

Ключевые цели, достигнутые в версии 1.0:

Реализация полного CRUD-цикла для проектов и задач.

Система аутентификации и авторизации с базовыми ролями (User, Admin).

Возможность командной работы через механизм участников проекта.

Поддержка прикрепления файлов и добавления комментариев к задачам.

Базовая система уведомлений о ключевых событиях.

Простые отчеты со статистикой и визуализацией данных по проектам.

Адаптивный веб-интерфейс.

Подготовка к развертыванию на реальном сервере.

2. Функциональные Возможности (Реализовано)

Ниже представлен детальный обзор реализованных функций, сгруппированных по модулям.

2.1. Аутентификация и Управление Аккаунтом

Регистрация: Пользователи могут создать аккаунт, указав уникальное имя пользователя, email и пароль. Пароли хешируются с использованием Bcrypt для безопасного хранения. Новым пользователям по умолчанию присваивается роль "User".

Вход/Выход: Стандартный механизм входа по email/паролю с использованием сессий Flask-Login. Реализована функция "Запомнить меня".

Смена Пароля: Пользователи могут изменить свой пароль на специальной странице в профиле, введя текущий и новый пароль. После успешной смены требуется повторный вход.

Редактирование Профиля: Пользователи могут изменять свое имя пользователя и email через настройки профиля. Реализована проверка уникальности новых данных.

2.2. Роли и Права Доступа

Роли: Внедрена система ролей с двумя базовыми ролями:

User: Стандартные права на создание/управление своими проектами и участие в других.

Admin: Имеет доступ к специальному разделу для управления пользователями.

Права доступа к Проектам:

Владелец: Полный контроль над проектом, включая редактирование, удаление, управление участниками и всеми задачами/файлами/комментариями.

Участник: Может просматривать проект, создавать/редактировать/удалять задачи, добавлять/удалять свои файлы и комментарии, просматривать файлы/комментарии других участников. Не может редактировать/удалять проект или управлять участниками.

Декораторы: Реализован декоратор @admin_required для защиты маршрутов, доступных только администраторам. Проверка доступа к проектам инкапсулирована в методе user.can_access_project().

2.3. Управление Проектами

Создание/Просмотр/Редактирование/Удаление (CRUD): Владельцы могут управлять своими проектами.

Список Проектов: Пользователи видят единый список проектов, где они являются владельцами или участниками.

Управление Участниками: Владелец проекта может приглашать других зарегистрированных пользователей в проект по email и удалять их из списка участников.

2.4. Управление Задачами

CRUD в рамках Проекта: Пользователи с доступом к проекту могут создавать, просматривать, редактировать и удалять задачи.

Атрибуты Задачи: Название, описание, статус (Enum: TODO, IN_PROGRESS, DONE, ARCHIVED), приоритет (Enum: LOW, MEDIUM, HIGH), срок выполнения (опционально), исполнитель (опционально, выбирается из участников проекта), создатель.

Отображение: Задачи выводятся списком на странице проекта с ключевой информацией и элементами управления.

2.5. Работа с Файлами

Прикрепление к Задачам: Реализована загрузка файлов к задачам с проверкой допустимых расширений и максимального размера (настраивается в config.py). Файлы хранятся на сервере с уникальными именами.

Скачивание/Удаление: Файлы доступны для скачивания пользователям с доступом к проекту. Удалить файл может его загрузивший пользователь или владелец проекта.

2.6. Коммуникация

Комментарии к Задачам: Пользователи с доступом к проекту могут добавлять комментарии. Отображается история комментариев с указанием автора и времени.

2.7. Уведомления

Генерация: Уведомления создаются автоматически при: назначении задачи, добавлении нового комментария (уведомляются владелец проекта, исполнитель и создатель задачи, если это разные люди и не автор комментария), добавлении пользователя в проект.

Отображение: Индикатор с количеством непрочитанных уведомлений в навбаре. Отдельная страница для просмотра всех уведомлений (при просмотре помечаются как прочитанные).

2.8. Отчеты и Аналитика

Отчет по Проекту: Генерируется страница с отчетом для выбранного проекта.

Статистика: Подсчет общего числа задач и их распределения по статусам и приоритетам. Расчет процента выполнения.

Визуализация (Chart.js): Отображение круговой диаграммы по статусам и столбчатой диаграммы по приоритетам.

2.9. Пользовательский Интерфейс

Адаптивность: Интерфейс построен на Bootstrap 5, обеспечивая базовую адаптивность для десктопов, планшетов и мобильных устройств.

Стиль: Применен единый стиль для списков проектов и отчетов, используется темная тема для навигационной панели.

3. Технологический Стек

Backend: Python 3.12, Flask 2.x/3.x, Flask-SQLAlchemy, Flask-Migrate, Flask-Login, Flask-WTF, Flask-Bcrypt, Gunicorn.

Frontend: HTML5, CSS3, Bootstrap 5.3, JavaScript (Vanilla JS), Chart.js 4.x.

База данных: SQLite 3 (для разработки и развертывания по упрощенной схеме).

Шаблонизатор: Jinja2.

Контроль версий: Git.

ОС Сервера (для развертывания): Ubuntu 22.04 LTS (или аналогичный Debian-based дистрибутив).

Веб-сервер (развертывание): Nginx.

Процесс-менеджер (развертывание): Systemd.

4. Архитектура и Структура Проекта

Проект построен с использованием проверенных паттернов и практик веб-разработки на Flask:

Application Factory (create_app в app/__init__.py): Позволяет создавать несколько экземпляров приложения с разной конфигурацией, что удобно для тестирования и развертывания. Здесь же происходит инициализация расширений и регистрация Blueprints.

Blueprints: Логика приложения разделена на модульные компоненты (Blueprints): auth, main, dashboard, projects, files, reports, cli. Каждый Blueprint имеет свои маршруты, шаблоны и, при необходимости, статические файлы. Это упрощает навигацию по коду и его поддержку.

Модели (app/models.py): Определения таблиц базы данных и их связей с использованием SQLAlchemy ORM. Включены модели User, Role, Project, Task, File, Comment, Notification, а также ассоциативная таблица project_members. Используются Enum для статусов и приоритетов задач.

Формы (app/*/forms.py): Определение веб-форм с использованием Flask-WTF (WTForms) для валидации пользовательского ввода и защиты от CSRF.

Маршруты (app/*/routes.py): Определение URL-эндпоинтов и соответствующих им view-функций, обрабатывающих запросы пользователя, взаимодействующих с моделями и формами, и рендерящих шаблоны.

Шаблоны (app/templates/, app/*/templates/): HTML-шаблоны с использованием синтаксиса Jinja2. Реализован базовый шаблон (base.html), переиспользуемые компоненты (_navbar.html, _formhelpers.html, _pagination.html), а также специфичные шаблоны для каждого модуля/страницы.

Расширения (app/extensions.py): Централизованное создание экземпляров расширений Flask (db, migrate, login_manager, bcrypt, csrf) для предотвращения циклических импортов.

Конфигурация (config.py, .env): Разделение конфигурации на базовый класс и загрузку секретных/зависящих от окружения параметров из файла .env с использованием os.environ.get().

Статические файлы (app/static/): Хранение CSS, JavaScript и изображений.

Загружаемые файлы (uploads/): Отдельная директория вне пакета app для безопасного хранения пользовательских файлов.

Утилиты (app/utils/): Вспомогательные модули, такие как decorators.py (для @admin_required) и notifications.py (для создания уведомлений).

Команды CLI (app/cli.py): Добавлены пользовательские команды Flask CLI (flask init-db, flask assign-admin) для удобного управления приложением.

5. Этапы Разработки (Кратко)

Разработка велась итеративно, фокусируясь на последовательном добавлении функциональных блоков:

Этап 0-1 (Основа и Аутентификация): Настройка окружения, базовая структура Flask, модели User и Role, настройка БД и миграций, реализация регистрации.

Этап 2 (Вход и Защита): Реализация входа/выхода, функция "Запомнить меня", защита страниц с помощью @login_required.

Этап 3 (Проекты): Модель Project, CRUD операции для проектов, базовая проверка прав владельца.

Этап 4 (Задачи): Модель Task (со статусами, приоритетами), CRUD для задач в контексте проекта, назначение исполнителей.

Этап 6 (Файлы): Модель File, логика загрузки/скачивания/удаления файлов, привязка к задачам, настройка UPLOAD_FOLDER.

Этап 7 (Комментарии): Модель Comment, форма и логика добавления/отображения комментариев к задачам.

Этап 8-9 (Роли и Участники): Реализация роли "Admin", декоратора @admin_required, админ-панели для управления пользователями. Внедрение M2M-связи "участники проекта", обновление логики доступа.

Этап 10 (Уведомления): Модель Notification, механизм создания и отображения уведомлений, индикатор в навбаре.

Этап 5 (Отчеты - Доработка): Базовый отчет по проекту со статистикой.

Этап 11 (Завершение): Реализация недостающих функций (смена пароля, настройки), добавление графиков в отчеты (Chart.js), финальная стилизация и исправление ошибок.

Этот итеративный подход позволил постепенно наращивать сложность и проверять работоспособность на каждом шаге.

6. Установка и Настройка (Разработка)

Клонируйте репозиторий.

Создайте и активируйте виртуальное окружение (python3 -m venv venv && source venv/bin/activate).

Установите зависимости (pip install -r requirements.txt).

Создайте файл .env на основе .env.example (если есть) или с нуля. Обязательно задайте SECRET_KEY и проверьте/установите абсолютные пути для DATABASE_URL (SQLite) и UPLOAD_FOLDER. Установите FLASK_ENV=development.

Создайте папку для загрузок (указанную в UPLOAD_FOLDER).

Примените миграции БД (flask db upgrade).

Инициализируйте роли (flask init-db).

Запустите сервер (flask run).

Зарегистрируйте первого пользователя.

Назначьте ему роль админа (flask assign-admin <его_email>).

7. Развертывание (Production)

Рекомендуемый стек: Ubuntu/Debian + Nginx + Gunicorn + Systemd + PostgreSQL.

Краткие шаги:

Настроить сервер (обновления, пользователь, фаервол).

Установить ПО (Python, Nginx, Git, PostgreSQL - если используется).

Настроить БД PostgreSQL (база, пользователь, права).

Развернуть код, настроить venv, установить зависимости (включая psycopg2-binary для PostgreSQL).

Настроить .env для production (новый SECRET_KEY, FLASK_ENV=production, DATABASE_URL для PostgreSQL).

Применить миграции (flask db upgrade), инициализировать роли (flask init-db).

Создать и настроить сервис Systemd для Gunicorn (используйте несколько воркеров для PostgreSQL, только 1 для SQLite!). Запустить и включить сервис.

Настроить Nginx как reverse proxy, указывая на сокет Gunicorn, настроить отдачу статики. Активировать конфигурацию, перезапустить Nginx.

Настроить HTTPS с помощью Certbot.

Создать пользователя-администратора (flask assign-admin).

Подробная инструкция по развертыванию была предоставлена отдельно.

8. Ключевые Переменные Конфигурации (.env)

FLASK_APP: Указывает на точку входа приложения (обычно run.py).

FLASK_ENV: Режим работы (development или production). Влияет на отладку и другие настройки Flask.

SECRET_KEY: Критически важный ключ для подписи сессий, CSRF-токенов и т.д. Должен быть длинным, случайным и секретным.

DATABASE_URL: Строка подключения к базе данных (например, sqlite:////path/to/app.db или postgresql://user:password@host/dbname).

UPLOAD_FOLDER: Абсолютный путь к папке для хранения загруженных файлов.

MAX_CONTENT_LENGTH: Максимальный размер загружаемого файла в байтах (опционально).

ALLOWED_EXTENSIONS: Строка с разрешенными расширениями через запятую (опционально).
